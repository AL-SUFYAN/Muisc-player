package com.example.myapplication;import static com.karumi.dexter.Dexter.*;import androidx.annotation.NonNull;import androidx.appcompat.app.AlertDialog;import androidx.appcompat.app.AppCompatActivity;import androidx.core.app.NotificationCompat;import androidx.core.app.NotificationManagerCompat;import android.Manifest;import android.annotation.SuppressLint;import android.content.DialogInterface;import android.content.Intent;import android.os.Bundle;import android.os.Environment;import android.text.format.Time;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.webkit.JavascriptInterface;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.BaseAdapter;import android.widget.ListView;import android.widget.TextView;import com.karumi.dexter.PermissionToken;import com.karumi.dexter.listener.PermissionDeniedResponse;import com.karumi.dexter.listener.PermissionGrantedResponse;import com.karumi.dexter.listener.PermissionRequest;import com.karumi.dexter.listener.single.PermissionListener;import org.junit.FixMethodOrder;import org.junit.rules.Timeout;import java.io.File;import java.util.ArrayList;import java.util.List;public class MainActivity extends AppCompatActivity{    ListView listView;    String[] items;    private File file;    String Name=null;    View title;    int positio =0;    boolean isPlaying =false;    @SuppressLint("WrongViewCast")    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        listView = findViewById(R.id.list_v);        runtimepermission();    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        MenuInflater inflater = getMenuInflater();        inflater.inflate(R.menu.menu,menu);        return true;    }    public void Exit(MenuItem item){        AlertDialog.Builder alert =new AlertDialog.Builder(MainActivity.this);        alert.setTitle("Exit");        alert                .setMessage("Are yuo sure yuo want to Exit?")                .setCancelable(false)                .setPositiveButton("yes", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int id ) {                     System.exit(0);                    }                })                 .setNegativeButton("no", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int id) {                        dialog.cancel();                    }                });        AlertDialog alertDialog =alert.create();        alertDialog.show();    }    public void info(MenuItem item){        AlertDialog.Builder alert =new AlertDialog.Builder(MainActivity.this);        alert.setTitle("About");        alert                .setMessage(R.string.abuot)                .setCancelable(false)                .setNegativeButton("Back", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int id) {                    }                });        AlertDialog alertDialog =alert.create();        alertDialog.show();    }    public void runtimepermission()    {        withContext(this).withPermission(Manifest.permission.READ_EXTERNAL_STORAGE)                .withListener(new PermissionListener() {                    @Override                    public void onPermissionGranted(PermissionGrantedResponse permissionGrantedResponse) {                        displaySong();                    }                    @Override                    public void onPermissionDenied(PermissionDeniedResponse permissionDeniedResponse) {                    }                    @Override                    public void onPermissionRationaleShouldBeShown(PermissionRequest permissionRequest, PermissionToken permissionToken) {                        permissionToken.continuePermissionRequest();                    }                }).check();    }    public ArrayList<File> findSong (@NonNull File file)    {        this.file = file;        ArrayList<File> arrayList = new ArrayList<>();        File[] files = file.listFiles();        for (File singlefile: files){            if (singlefile.isDirectory() && !singlefile.isHidden()){                arrayList.addAll(findSong(singlefile));            } else {                if (singlefile.getName().endsWith(".mp3") || singlefile.getName().endsWith(".wav")){                    arrayList.add(singlefile);                }            }        }        return arrayList;    }    void displaySong(){        final ArrayList<File> mySongs =findSong(Environment.getExternalStorageDirectory());        items =new String [mySongs.size()];        for (int i=0; i<mySongs.size(); i++)        {            items[i] =mySongs.get(i).getName().toString().replace(".mp3", "").replace("wav", "");        }        /*ArrayAdapter<String> myAdapter =new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, items);        listView.setAdapter(myAdapter);*/        customAdapter customAdapter =new customAdapter();        listView.setAdapter(customAdapter);        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {                String songName =(String) listView.getItemAtPosition(i);                startActivity(new Intent(getApplicationContext(),PlayerActivity.class)                        .putExtra("songs", mySongs)                        .putExtra("songname", songName)                        .putExtra("pos", i));            }        });    }    class customAdapter extends BaseAdapter    {        @Override        public int getCount() {            return items.length;        }        @Override        public Object getItem(int i) {            return null;        }        @Override        public long getItemId(int i) {            return 0;        }        @Override        public View getView(int i, View view, ViewGroup viewGroup) {            View myView =getLayoutInflater().inflate(R.layout.list_item ,null);            TextView mytextsong =myView.findViewById(R.id.textsongname);            mytextsong.setSelected(true);            mytextsong.setText(items[i]);            return myView;        }    }}